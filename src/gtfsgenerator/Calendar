{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import Numpy and Pandas\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from pandas.tseries.holiday import Holiday, AbstractHolidayCalendar\n",
    "from pandas.tseries.holiday import MO, TU, TH, FR, nearest_workday\n",
    "from pandas.tseries.offsets import *\n",
    "from pandas.tseries.holiday import USMemorialDay, USLaborDay, USColumbusDay, USThanksgivingDay, USMartinLutherKingJr, USPresidentsDay, GoodFriday, EasterMonday\n",
    "\n",
    "        \n",
    "   \n",
    "def election_observance(dt):\n",
    "    if dt.year % 2 == 1:\n",
    "        dt = pd.to_datetime('1/1/2000')\n",
    "        return dt\n",
    "    else:\n",
    "        return dt + pd.DateOffset(weekday=TU(1))\n",
    "        \n",
    "class ExampleCalendar(AbstractHolidayCalendar):\n",
    "    \n",
    "    rules = [\n",
    "    Holiday('New Years Day', month=1,  day=1,  observance=nearest_workday),\n",
    "    USMartinLutherKingJr,\n",
    "    USPresidentsDay,\n",
    "    USMemorialDay,\n",
    "    Holiday('July 4th', month=7,  day=4,  observance=nearest_workday),\n",
    "    USLaborDay,\n",
    "    USColumbusDay,\n",
    "    Holiday('Veterans Day', month=11, day=11, observance=nearest_workday),\n",
    "    USThanksgivingDay,\n",
    "    Holiday('Christmas', month=12, day=25, observance=nearest_workday),\n",
    "    #  GoodFriday, EasterMonday\n",
    "    GoodFriday,\n",
    "    EasterMonday,\n",
    "    Holiday('Day After Thanksgiving Day', month=11, day=1, offset=DateOffset(weekday=FR(4))),\n",
    "    Holiday('Veterans Day', month=11, day=11, observance=nearest_workday),\n",
    "    Holiday('US Election Day', month=11, day=1, observance=election_observance),\n",
    "    Holiday('WV Primary Election Day', month=5, day=1, observance=election_observance),\n",
    "    Holiday('WV Day', month=6, day=20),\n",
    "    ]\n",
    "\n",
    "def determine_calendar_dates(start_date, end_date, dt_max):\n",
    "    cal = ExampleCalendar()\n",
    "    delta = end_date - start_date\n",
    "    # GTFS feeds can't be > 1 year from start date\n",
    "    print('{}  days between start and end date.'.format(delta))\n",
    "    if str(delta) > dt_max:\n",
    "        do = pd.DateOffset(days=364)\n",
    "        end_date = start_date + do\n",
    "        print('   New end date is {}'.format(end_date))\n",
    "    calendar = cal.holidays(start_date, end_date, return_name=True)\n",
    "    return calendar\n",
    "\n",
    "def select_agency_calendar_dates(calendar, holiday_list):\n",
    "    dates = []\n",
    "    for i in range(len(calendar.values)):\n",
    "        if calendar.values[i] in holiday_list:\n",
    "            # print(calendar.index[i], calendar.values[i])\n",
    "            dates.append(calendar.index[i])\n",
    "    return dates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "start_date = pd.Timestamp('20160108')\n",
    "end_date   = pd.Timestamp('20171231')\n",
    "dt_max     = 365\n",
    "holiday_list = [\"New Years Day\",'July 4th', 'Christmas','Thanksgiving']\n",
    "\n",
    "my_calendar = determine_calendar_dates(start_date, end_date, dt_max)\n",
    "\n",
    "# print(my_calendar)\n",
    "# for i in range(len(my_calendar.values)):\n",
    "#     if my_calendar.values[i] in my_calendar:\n",
    "#         print(my_calendar.index[i], my_calendar.values[i])\n",
    "\n",
    "select_agency_calendar_dates(my_calendar, holiday_list)\n",
    "\n",
    "dates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    ""
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 0
}